(defwidget bar []
(box :class "bar"
  (centerbox :orientation "h"
    (tray)
    (workspaces)
    (sidestuff)
    ))
)

(defwidget workspaces []
	(literal :content workspace))
(deflisten workspace "scripts/workspace 0")

(defwidget clock []
  (box :class "clock"
       :orientation "h"
       :space-evenly false
       :halign "center"
    (button
        :class ""
        :onclick "scripts/calendar.sh show"
        date-time)
))

(defpoll date-time :interval "1s"
  "scripts/date-time")

(defwidget sidestuff []
    (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end" :spacing 10
        (cpu)
        (ram)
        (box :class "separator" "|")
        (net)
        (audio)
        (battery)
        (box :class "separator" "|")
        (clock)
        (box :class "separator" "|")
        (power)
    ))

(defwidget tray []
    (box :class "tray" :orientation "h" :space-evenly false
        (systray)
    ))

(defwidget audio []
    (eventbox
        :onscroll "scripts/volumecontrol {}"
        (box :class "audio"
            :orientation "h"
            :space-evenly false
            :halign "end"
            :spacing 10
            (button
                :class ""
                :onclick "scripts/volumecontrol mute"
                volume)
        )))

(defwidget ram []
    (box :class "ram"
            :orientation "h"
            :space-evenly false
        " "
        ramuse
        "%"
            ))

(defwidget cpu []
    (box :class "ram"
            :orientation "h"
            :space-evenly false
        " "
        cpuuse
        "%"
            ))

(defwidget net []
  (box :class "net"
       :orientation "h"
       :space-evenly false
       :halign "end"
       :spacing 10
    (button
        :class ""
	:onclick "scripts/wifi ShowInfo"
        network)
))

(defwidget power []
  (box :class "power"
       :orientation "h"
       :space-evenly false
       :halign "end"
       :spacing 10
    (button
        :class ""
        :onclick "scripts/powermenu"
        "")
))

(defwidget powermenu []
  (box :class "powermenu"
       :orientation "v"
       :space-evenly false
       :halign "end"
        :valign "end"
       :spacing 10
    (poweritems)
))

(defwidget poweritems []
    (box :class ""
        :orientation "h"
        :space-evenly true
        :halign "end"
        :spacing 20
    (button
        :class "powerbutton"
        :onclick "wayland-lock"
        "")
    (button
        :class "powerbutton"
        :onclick "hyprctl dispatch exit"
        "")
    (button
        :class "powerbutton"
        :onclick "sudo -A reboot"
        "")
    (button
        :class "powerbutton"
        :onclick "systemctl suspend-then-hibernate -i"
        "⏾")
    (button
        :class "powerbutton"
        :onclick "sudo -A shutdown -h now"
        "")
    ))

(defwidget battery []
    (box    :orientation "h"	
            :space-evenly false
            :halign "end"
            :spacing 10
	(label	:class "battery"		
			:halign "end"		
			:text battery	
			:tooltip "Battery: ${battery-cappacity}%")))
(defpoll battery			:interval "1s"	"scripts/battery icon")
(defpoll battery-cappacity	:interval "1s"	"scripts/battery percent")

(defpoll network :interval "1s"
  "scripts/wifi --class")

(defpoll volume :interval "1s"
  "scripts/volumecontrol")

(defpoll brightness :interval "1s"
  "scripts/brightnesscontrol")

(defpoll ramuse :interval "1s"
    "free -m | grep Mem: | awk '{print ($3/($2/100))}' | grep -oE '^[0-9]*'"
)

(defpoll cpuuse :interval "1s"
    "grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}'| grep -oE '^[0-9]*'"
)


(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0px"
                      :width "100%"
                      :height "20px"
                      :anchor "top center")
  :stacking "fg"
  :exclusive "true"
  :focusable false
  (bar))

(defwidget closer [window]
  (eventbox :onclick "eww close ${window} && eww close ${window}-closer"))
 
(defwindow powermenu-closer
  :monitor 0
  :geometry (geometry :width "100%" :height "100%")
  :stacking "fg"
  :focusable false
  (closer :window "powermenu"))

(defwindow powermenu
  :monitor 0
  :geometry (geometry :x "20px"
                      :y "20px"
                      :width "300px"
                      :anchor "top right")
  :stacking "fg"
  :focusable false
  (powermenu))
